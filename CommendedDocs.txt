# class ChangePasswordSerializer(serializers.Serializer):
#     user_or_email=serializers.CharField(required=True)
#     old_password=serializers.CharField(required=True)
#     new_password = serializers.CharField(required=True, validators=[validate_password])
#     confirm_new_password = serializers.CharField(required=True)
#     def validate(self, data):
#         if data['new_password'] != data['confirm_new_password']:
#             raise ValidationError({
#                 "confirm_new_password": "New password fields didn't match."})
#         return data
    
#     def validate_username_or_email(self, value):
#         try:
#             if '@' in value:
#                 user = User.objects.get(email=value)
#             else:
#                 user = User.objects.get(username=value)
#         except User.DoesNotExist:
#             raise ValidationError("User with this username or email does not exist.")
#         return user
    
# class ChangePasswordSerializer(serializers.Serializer):
#     user_or_email = serializers.CharField(required=True)
#     old_password = serializers.CharField(required=True)
#     new_password = serializers.CharField(required=True, validators=[validate_password])
#     confirm_new_password = serializers.CharField(required=True)

#     def validate(self, data):
#         if data['new_password'] != data['confirm_new_password']:
#             raise ValidationError({
#                 "confirm_new_password": "New password fields didn't match."
#             })
#         return data

#     def validate_user_or_email(self, value):
#         try:
#             if '@' in value:
#                 user = User.objects.get(email=value)
#             else:
#                 user = User.objects.get(username=value)
#         except User.DoesNotExist:
#             raise ValidationError("User with this username or email does not exist.")
#         self.user = user  # Save the user object for later use
#         return value  # Return the original value

#     def get_user(self):
#         return self.user



# # @api_view(['PATCH'])
# # def change_password(request):
#     serializer = ChangePasswordSerializer(data=request.data)
#     if serializer.is_valid():
#         user_or_email = serializer.validated_data['user_or_email']

#         try:
#             if '@' in user_or_email:
#                 user=User.objects.get(email=user_or_email)
#             else:
#                 user=User.objects.get(username=user_or_email)
#         except User.DoesNotExist:
#             return Response({"username_or_email": ["User with this username or email does not exist."]}, status=status.HTTP_400_BAD_REQUEST)

#         if not user.check_password(serializer.validated_data['old_password']):
#             return Response({"old_password": ["Wrong password."]}, status=status.HTTP_400_BAD_REQUEST)
#         user.set_password(serializer.validated_data['new_password'])
#         user.save()
#         return Response({"detail": "Password updated successfully"}, status=status.HTTP_200_OK)
#     return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

